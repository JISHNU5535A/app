--- flutter_service_worker.js	2023-03-24 18:54:05
+++ flutter_service_worker2.js	2023-03-24 18:54:48
@@ -4,8 +4,8 @@
 const CACHE_NAME = 'flutter-app-cache';
 const RESOURCES = {
   "version.json": "11e1a177d57c5da2bc6e3a6acc3010f4",
-"index.html": "d3fd84181d3707365a646217bf2ca9a3",
-"/": "d3fd84181d3707365a646217bf2ca9a3",
+"index.html": "387191a7d21de0b6058d395d5ada50ea",
+"/": "387191a7d21de0b6058d395d5ada50ea",
 "main.dart.js": "c5705716cb1a470ced81fb369fca3ccc",
 "flutter.js": "1cfe996e845b3a8a33f57607e8b09ee4",
 "favicon.png": "0063030f6ef69989a7a1cea69a72bb11",
@@ -28,22 +28,10 @@
 
 // The application shell files that are downloaded before a service worker can
 // start.
-const CORE = [
-  "main.dart.js",
-"index.html",
-"assets/AssetManifest.json",
-"assets/FontManifest.json"];
-// During install, the TEMP cache is populated with the application shell files.
-self.addEventListener("install", (event) => {
-  self.skipWaiting();
-  return event.waitUntil(
-    caches.open(TEMP).then((cache) => {
-      return cache.addAll(
-        CORE.map((value) => new Request(value, {'cache': 'reload'})));
-    })
-  );
-});
 
+/* Removed this section because the files are downloaded concurrently, so we don't check */
+
+
 // During activate, the cache is populated with the temp files downloaded in
 // install. If this service worker is upgrading from one with a saved
 // MANIFEST, then use this to retain unchanged resource files.
@@ -130,12 +118,24 @@
       return cache.match(event.request).then((response) => {
         // Either respond with the cached resource, or perform a fetch and
         // lazily populate the cache only if the resource was successfully fetched.
-        return response || fetch(event.request).then((response) => {
+  
+        if (response) {
+          return response;
+        }
+
+        if (IN_PROCESSING_REQUESTS[key]) {
+          return IN_PROCESSING_REQUESTS[key].clone();
+        }
+
+        return fetch(event.request).then((response) => {
           if (response && Boolean(response.ok)) {
-            cache.put(event.request, response.clone());
+            cache.put(event.request, response.clone())
+                .then(() => delete IN_PROCESSING_REQUESTS[key]);
           }
-          return response;
-        });
+
+          IN_PROCESSING_REQUESTS[key] = response.clone();
+            return response;
+          });
       })
     })
   );
